Time & Space Complexity -

Less Time  <---
              |=====> Best Combination 
Less Space <---

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity - The valid algorithm takes a finite amount of time for execution. The time required by the algorithm to solve given problem is called
                  time complexity  of the algorithm.


                                              Types of Time Complexity
                                                        |
             --------------------------------------------------------------------------------------------
            |                                           |                                                |
          Best Case                                  Average Case                                      Worst Case
           ||                                           ||                                               ||
    (Represented by Ω)                         (Represented by θ)                                (Represented by big-Ω)   

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
* How to Find ->

# What is the complexity of a constant?
==>The first order of functions, O(1), or constant time complexity, signifies that the algorithm's running time is independent of the input size and is the most efficient.
   The other O-notations are listed in their rank order of efficiency.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
* For Example -

1) Constant Time Complexity -
 
int x;
x= 10;
sout(x);
int arr[] = {1,2,3,4};
n = arr.length;
for(int i = 0; i < n ; i++){
sout(arr[x]);
}

===> Time Complexity :- O(const) / O(1).
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)  O(n)2 Time Complexity -

int x;
x= 10;
n = sc.nextInt();
sout(x);
int arr[] = new int[n]
n = arr.length;
for(int i = 0; i < n ; i++){
sout(arr[x]);
}

====>Time Complexity :- O(n²).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) 

int main()
int n = sc.nextInt()
for(int i = 0; i < n ; i++){
sout(i);
}
for(int j = 0; j < n ; j++){
sout(j);
}
}

===> Time Complexity :- O(n).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
4)

for(int i = 0; i < n ; i++)
{
for(int j = 0; j < n ; j++)
{
sout(j);
}
}

===> Time Complexity :- O(n²).

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) Nested for loops- 

for(int i = 0; i < n ; i++)
{
for(int j = 0; j < n ; j++)
{
for(int k = 0; k < n;k++)
{
sout(k);
}
}
}

===> Time Complexity :- O(nm).

if nested for loop present multiply or else add them together. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

6) for(int i = 1;i<n;i=i*2)
{
sout(i);
}

Solution=> 1,2,4,8,16,32,64

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

*How To Calculate Log :-

2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 ........... + 2^n
2(^0 + ^1 + ^2 + ^3 + ^4 + ^5................ + ^n) = K.
2^n = K.

Adding Log on Both Sides,
Log 2^2^n = Log K.
n = Log K.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Space Complexity - 
                   The total amount of memory space used by an algorithm/program, including the space of input values for execution.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Topics covered in DSA - 

1)2D Array 
2)Linked list
3)Stack 
4)Queue
5)Hash set,Hash Map
6)Trees
7)Graph

-------------------------------------------------------------------------------------------------------------------------------------------------------------------







