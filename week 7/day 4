Hands on Practice on Hash Table -

Crud Operations For - 
to Create/Update => use tb.put()  // to update or add the value so it overrides the current one .
to Delete => use tb.remove()
to check if key is present => tb.containsKey()
to check if contains value => tb.containsValue()
to Check size of hashtable => tb.size()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sample Program -  

import java.util.Hashtable;

public class HashTableP {
    public static void main(String[] args) {

        Hashtable<Integer,String>  ht = new Hashtable<>();

        ht.put(10,"Ashpak");
        ht.put(11,"Sandeep");
        ht.put(12,"Rushikesh");
        ht.put(14,"Swarup");
        ht.put(7,"Vighnesh");
        ht.put(19,"Krishna");

        ht.remove(12);
        System.out.println(ht.containsKey(3));
        System.out.println(ht.containsValue("Ashpak"));
        System.out.println(ht.size());
        System.out.println(ht);

        for (Integer pt : ht.keySet()){
            System.out.println(pt);                                 //Prints all the keys by taking pt as a pointer.
        }
        for (String pt : ht.values()){
            System.out.println(pt);                                 //Prints all the values by taking pt as a pointer
        }
        for (Map.Entry<Integer,String> pt:ht.entrySet()){
            System.out.println(pt.getKey()+ " " +pt.getValue());    //Prints all the Values and keys together by taking pt as a pointer.
        }
    }
}


# THREAD SAFE - 
Hashtable is thread-safe and can be shared between multiple threads in the application.
On the other hand, HashMap is not synchronized and can't be accessed by multiple threads without additional synchronization code.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

# HASH MAP - 
Part of Java collection framework & is similar to HashTable ....
Java HashMap is similar to HashTable, but it is unsynchronized. 
It allows to store the null keys as well, but there should be only one null key object and there can be any number of null values. 
This class makes no guarantees as to the order of the map. 
To use this class and its methods, you need to import java.util.HashMap package or its superclass.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Characteristic of HashMap -
1)Not Thread-safe 
2)Non - Synchronized 
3)Allow Nulls 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Sample Program =>

import java.util.HashMap;
public class HashMap1 {
    public static void main(String[] args) {
        HashMap<Integer,String>mp = new HashMap<>();

       mp.put(1,"Ashpak");
        mp.put(2,"sandeep");
        mp.put(3,"rushikesh");
        mp.put(4,"Swarup");
        mp.put(5,"Vdj");

        System.out.println(mp);

        mp.remove(5);
        System.out.println(mp.size());
        System.out.println(mp);

        for (Integer pt : mp.keySet()){
            System.out.println(pt);
        }
        for (String pt : mp.values()){
            System.out.println(pt);
        }
        for (Map.Entry<Integer,String> pt:mp.entrySet()){
            System.out.println(pt.getKey()+ " " +pt.getValue());
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

# HASH SET - 
Collection that implements the set interface backed by a hash table.
it does not alllow duplicate elements.

Characteristics -
Unique Elements - automatically removes duplicate elements.
Hash Function - 
No order 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Sample Program -

import java.util.HashSet;
public class HashSet1 {
    public static void main(String[] args) {
        HashSet<Integer> st = new HashSet<>();

        st.add(1);
        st.add(2);
        st.add(3);
        st.add(4);
        st.add(5);
        System.out.println(st);

        st.remove(5);
        System.out.println(st.contains(1));
        System.out.println(st);

        for (Integer pt : st){
            System.out.println(pt);
        }
    }
}




